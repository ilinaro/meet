name: meet-app-deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-production:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: [self-hosted, meet-app]
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug environment
        run: |
          echo "github.ref is ${{ github.ref }}"
          whoami
          docker --version
          make --version
          ls -la
          
      - name: Debug paths
        run: |
          ls -la ./meet/client/ || echo "Client path not found"
          ls -la ./meet/backend/auth-service/ || echo "Auth service path not found"
          
      - name: Build the client Docker image
        run: docker build . -t meet-app-client -f Dockerfile
        working-directory: ./meet/client
        
      - name: Build the auth-service Docker image
        run: docker build . -t meet-app-server -f Dockerfile
        working-directory: ./meet/backend/auth-service
        
      - name: Check images
        run: docker images | grep -E "meet-app-client|meet-app-server"
        
      - name: Execute tests
        run: exit 0

  remove-container-production:
    runs-on: [self-hosted, meet-app]
    needs: build-production
    steps:
      - uses: actions/checkout@v4
      
      - name: Remove old Docker containers
        run: docker-compose down || true

  start-production:
    runs-on: [self-hosted, meet-app]
    needs: remove-container-production
    steps:
      - uses: actions/checkout@v4
      
      - name: Create environment file
        run: |
          cat > .env << 'EOF'
          PORT=${{ secrets.PORT }}
          DB_URL=${{ secrets.DB_URL }}
          CLIENT_URL=${{ secrets.CLIENT_URL }}
          ROUTER_API=${{ secrets.ROUTER_API }}
          JWT_ACCESS_SECRET_KEY=${{ secrets.JWT_ACCESS_SECRET_KEY }}
          JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          API_URL=${{ secrets.API_URL }}
          WS_PORT=${{ secrets.WS_PORT }}
          EOF
          
      - name: Deploy with docker-compose
        run: docker-compose up -d

  clean-old-containers:
    runs-on: [self-hosted, meet-app]
    needs: start-production
    steps:
      - name: Remove old Docker containers and images
        run: |
          docker system prune -f
          docker image prune -a --filter "until=24h" -f